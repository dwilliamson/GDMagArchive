Listing 3: Motorola C++ assembly for Listing 2.
TransformVectors2__FPfPA3_CfPCfi.b:
	cmpi	0x7,0x0,r6,0	; compare count to 0
	addi	r11,r0,0	; Counter = r11 = 0
	bc	0x4,0x1d,L..11	; bail out if count = 0
	addi	r8,sp,24	; allocate some stack
L..8:	ori	r9,r4,0x0	; r9 = pMatrix
	addi	r10,r0,0	; r10 = 0
	ori	r7,r10,0x0	; r7 = 0
	subfic	r10,r10,3	; r10 = 3
	mtctr	r10	; ctr = 3
L..9:	lfs	f1,0(r9)	; f1 = pMatrix[0]
	lfs	f2,0(r5)	; f2 = pSource[0]
	lfs	f3,4(r9)	; f3 = pMatrix[1]
	lfs	f4,4(r5)	; f4 = pSource[1]
	fmuls	f1,f1,f2	; f1 = f1 * f2
	lfs	f2,8(r9)	; f2 = pMatrix[2]
	lfs	f5,8(r5)	; f5 = pSource[2]
	fmadds	f3,f3,f4,f1	; f3 = f3 * f4 + f1
	addi	r9,r9,12	; pMatrix->next row
	fmadds	f2,f2,f5,f3	; f2 = f2 * f5 + f3
	stfsx	f2,r8,r7	; *(stack + r7) = f2
	addi	r7,r7,4	; r7 next float
	bc	0x10,0x0,L..9	; branch if (--ctr)
	lfs	f1,0(r8)	; f1 = stack[0]
	lfs	f2,4(r8)	; f2 = stack[1]
	lfs	f3,8(r8)	; f3 = stack[2]
	stfs	f1,0(r3)	; pDest[0] = f1
	addi	r3,r3,4	; pDest++
	addi	r11,r11,1	; Counter++
	stfs	f2,0(r3)	; pDest[1] = f2
	addi	r3,r3,4	; pDest++
	cmp	0x7,0x0,r11,r6	; flags = Counter < NumVecs
	addi	r5,r5,12	; pSource += 3
	stfs	f3,0(r3)	; pDest[2] = f3
	addi	r3,r3,4	; pDest++
	bc	0xc,0x1c,L..8	; branch if (Counter < NumVecs)
L..11:	addi	sp,sp,48	; clear stack
	bclr	0x14,0x0	; return


