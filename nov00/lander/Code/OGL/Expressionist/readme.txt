
Real-time 3D Painting and Particle Placement November 2000
----------------------------------------------------------
v. 1.05

This version adds 3D particle placement to the 3D paint package.  There is a
new menu under Paint/Mode that select the mode you are working in.  It supports
Paint and Particles.  Paint is texture painting while Particle is a 3D particle
placement tool.

To place particles on a 3D object.

1. Go into Paint/Mode/Particles
2. Click on the model with the LMB and drag to establish a position for the 
	new particle and the size and orientation for it.
3. Hit SPACE or MMB to create the particle.
4. The particles are colored by modulating the base texture with the current 
	color.  Select a new color with Paint/Color.
5. DEL will remove the last created particle.
6. Load/Save Particle System to save the results.

You can load a new texture for the particles with File/Load Particle Texture.

The current demo defaults to loading the tree with its particles.  That auto-load
is in Mainframe.cpp.

Stuff you can do to improve the Particle System

1. Allow for different textures to be applied to particles
2. Add particle dynamics so for example, the "leaves can fall off the tree"
3. Allow for long strokes that apply a bunch of particles similar to Maya Painterly Effects


v. 1.02

This is the sample application that accompanies the October 2000
Game Developer magazine.  It extends the 3D Paint application from
September to handle creating new texture projections.

You can now save an OBJ file that you have re-textured as well as save
the painted texture map.

The Texture coordinates generated by the projections are not optimized.
The routines create 3 texture coordinates per triangle.  That means the saved 
OBJ files will be slightly larger.  The file could be optimized to share UV 
coordinates, but I will leave that up to you.

The OBJ reader is not very robust.  It may or may not work with a particular 
modeling package.  But since the format is ASCII, it is very easy to 
manipulate.

v. 1.0

This is the sample application that accompanies the September 2000
Game Developer magazine.  It is meant as a demonstration of
a method for simple painting directly on a 3D object.

Load an OBJ file with texture coordinates and a texture map. (Note: this
method works best with textures 256x256 and below). You should
then see it come up in the view.  You can turn lighting on/off via the 
menu.  Also toggle bilinear filtering with the menu.

Painting
---------------------------------------------------------------------
LMB and drag across the object to paint with the current brush
LMB+SHIFT to select the color under the mouse as the current pen color

Manipulating the View
---------------------------------------------------------------------
RMB to Rotate view in X and Y
RMB+CTRL to Translate in X and Z
RMB+SHIFT to Translate in X and Y

MMB	to Translate in X and Z

You can also change the pen color through the menu option.  Once the 
object is painted the way you like it, save the file out as a TGA to disk.

---------------------------------------------------------------------

Stuff you can do to improve:

For the Paint System

1. Make the color selection a swatch that is always active.
2. Allow for different sized brushes and brush types.
3. Track the stroke pattern and then stroke the texture afterwards in a smooth manner.
4. Allow for an alpha component to the brush color then mix with the texture.
5. Add support for multiple UV channels, bump mapping, etc.
6. Improve the selection buffer so it handles large textures better.

---------------------------------------------------------------------

Write to me if you have problems or questions and check 
the web site or Game Developer's web site for updates.

Jeff Lander 
jeffl@darwin3d.com
www.darwin3d.com/gamedev.htm
-----------------------------------------------------------

I know this code could be optimized for maximum performance
but it was written to be a clean example without a lot of
tricks.  It should be easy to learn and build from.  

Here are the details.

I compiled the code with Visual C++ 6.0.  It has been tested
with Microsoft OpenGL, Permidia 2 OpenGL,  NVidia TNT, TNT2, GeForce256.

It should run on any OpenGL fully complient driver.  This 
DOES NOT include the mini-QuakeGL driver for 3DFX Voodoo or
Voodoo 2.  3DFX Voodoo and Voodoo 2 OpenGL do not support 
OpenGL in a window so will not work with this application.


