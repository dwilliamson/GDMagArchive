typedef long fixed28_4;
inline fixed28_4 FloatToFixed28_4( float Value ) {
	return Value * 16;
}
inline float Fixed28_4ToFloat( fixed28_4 Value ) {
	return Value / 16.0;
}
inline fixed28_4 Fixed28_4Mul( fixed28_4 A, fixed28_4 B ) {
							// could make this asm to prevent overflow
	return (A * B) / 16;	// 28.4 * 28.4 = 24.8 / 16 = 28.4
}
inline long Ceil28_4( fixed28_4 Value ) {
	long ReturnValue;
	long Numerator = Value - 1 + 16;
	if(Numerator >= 0) {
		ReturnValue = Numerator/16;
	} else {
		// deal with negative numerators correctly
		ReturnValue = -((-Numerator)/16);
		ReturnValue -= ((-Numerator) % 16) ? 1 : 0;
	}
	return ReturnValue;
}
struct POINT3D {
	fixed28_4 X, Y;
	float Z;
	float U, V;
};
inline void FloorDivMod( long Numerator, long Denominator, long &Floor,
				long &Mod )
{
	assert(Denominator > 0);						// we assume it's positive
	if(Numerator >= 0) {
		// positive case, C is okay
		Floor = Numerator / Denominator;
		Mod = Numerator % Denominator;
	} else {
		// Numerator is negative, do the right thing
		Floor = -((-Numerator) / Denominator);
		Mod = (-Numerator) % Denominator;
		if(Mod) {
			// there is a remainder
			Floor-; Mod = Denominator - Mod;
		}
	}
}
gradients::gradients( POINT3D const *pVertices )
{
	int Counter;
	fixed28_4 X1Y0 = Fixed28_4Mul(pVertices[1].X - pVertices[2].X,
									pVertices[0].Y - pVertices[2].Y);
	fixed28_4 X0Y1 = Fixed28_4Mul(pVertices[0].X - pVertices[2].X,
									pVertices[1].Y - pVertices[2].Y);
	float OneOverdX = 1.0 / Fixed28_4ToFloat(X1Y0 - X0Y1);
	float OneOverdY = -OneOverdX;
	for(Counter = 0;Counter < 3;Counter++)
	{
		float const OneOverZ = 1/pVertices[Counter].Z;
		aOneOverZ[Counter] = OneOverZ;
		aUOverZ[Counter] = pVertices[Counter].U * OneOverZ;
		aVOverZ[Counter] = pVertices[Counter].V * OneOverZ;
	}
	dOneOverZdX = OneOverdX * (((aOneOverZ[1] - aOneOverZ[2]) *
			Fixed28_4ToFloat(pVertices[0].Y - pVertices[2].Y)) -
			((aOneOverZ[0] - aOneOverZ[2]) *
			Fixed28_4ToFloat(pVertices[1].Y - pVertices[2].Y)));
	dOneOverZdY = OneOverdY * (((aOneOverZ[1] - aOneOverZ[2]) *
			Fixed28_4ToFloat(pVertices[0].X - pVertices[2].X)) -
			((aOneOverZ[0] - aOneOverZ[2]) *
			Fixed28_4ToFloat(pVertices[1].X - pVertices[2].X)));
	dUOverZdX = OneOverdX * (((aUOverZ[1] - aUOverZ[2]) *
			Fixed28_4ToFloat(pVertices[0].Y - pVertices[2].Y)) -
			((aUOverZ[0] - aUOverZ[2]) *
			Fixed28_4ToFloat(pVertices[1].Y - pVertices[2].Y)));
	dUOverZdY = OneOverdY * (((aUOverZ[1] - aUOverZ[2]) *
			Fixed28_4ToFloat(pVertices[0].X - pVertices[2].X)) -
			((aUOverZ[0] - aUOverZ[2]) *
			Fixed28_4ToFloat(pVertices[1].X - pVertices[2].X)));
	dVOverZdX = OneOverdX * (((aVOverZ[1] - aVOverZ[2]) *
			Fixed28_4ToFloat(pVertices[0].Y - pVertices[2].Y)) -
			((aVOverZ[0] - aVOverZ[2]) *
			Fixed28_4ToFloat(pVertices[1].Y - pVertices[2].Y)));
	dVOverZdY = OneOverdY * (((aVOverZ[1] - aVOverZ[2]) *
			Fixed28_4ToFloat(pVertices[0].X - pVertices[2].X)) -
			((aVOverZ[0] - aVOverZ[2]) *
			Fixed28_4ToFloat(pVertices[1].X - pVertices[2].X)));
}
edge::edge( gradients const &Gradients, POINT3D const *pVertices,
			int Top, int Bottom )
{
	Y = Ceil28_4(pVertices[Top].Y);
	int YEnd = Ceil28_4(pVertices[Bottom].Y);
	Height = YEnd - Y;
	if(Height)
	{
		long dN = pVertices[Bottom].Y - pVertices[Top].Y;
		long dM = pVertices[Bottom].X - pVertices[Top].X;
		long InitialNumerator = dM*16*Y - dM*pVertices[Top].Y +
					dN*pVertices[Top].X - 1 + dN*16;
		FloorDivMod(InitialNumerator,dN*16,X,ErrorTerm);
		FloorDivMod(dM*16,dN*16,XStep,Numerator);
		Denominator = dN*16;
		float YPrestep = Fixed28_4ToFloat(Y*16 - pVertices[Top].Y);
		float XPrestep = Fixed28_4ToFloat(X*16 - pVertices[Top].X);
		OneOverZ = Gradients.aOneOverZ[Top]
						+ YPrestep * Gradients.dOneOverZdY
						+ XPrestep * Gradients.dOneOverZdX;
		OneOverZStep = XStep * Gradients.dOneOverZdX
						+ Gradients.dOneOverZdY;
		OneOverZStepExtra = Gradients.dOneOverZdX;
		UOverZ = Gradients.aUOverZ[Top]
						+ YPrestep * Gradients.dUOverZdY
						+ XPrestep * Gradients.dUOverZdX;
		UOverZStep = XStep * Gradients.dUOverZdX
						+ Gradients.dUOverZdY;
		UOverZStepExtra = Gradients.dUOverZdX;
		VOverZ = Gradients.aVOverZ[Top]
						+ YPrestep * Gradients.dVOverZdY
						+ XPrestep * Gradients.dVOverZdX;
		VOverZStep = XStep * Gradients.dVOverZdX
						+ Gradients.dVOverZdY;
		VOverZStepExtra = Gradients.dVOverZdX;
	}
}
