Listing 2.  Setting up a full-screen environment using Display Manager 2.0
static WindowPtr Window;
static PaletteHandle hPalette;
static GWorldPtr pOffscreenGWorld;
static GDHandle DisplayDevice;

static unsigned short csPreviousMode;
static unsigned long csPreviousData;

// This structure encapsulates the data sent to the Display Manager list
// enumeration callback function. We fill in the desired values, pass 
// this on through the enumeration, and it fills in the csMode and
// csData info we need.
struct DisplayModeRequest
{
	// Returned values
	unsigned short csMode;
	unsigned long csData;

	// Provided values
	long DesiredWidth;
	long DesiredHeight;
	long DesiredDepth;
};

// This function filters through the display modes reported by the 
// Display Manager, looking for one that matches the requested 
// resolution. The userData pointer will point to a DisplayModeRequest
// structure.
pascal void DisplayModeCallback(void* userData, DMListIndexType,
	DMDisplayModeListEntryPtr pModeInfo)
{
	DisplayModeRequest *pRequest = (DisplayModeRequest*)userData;

	// Get timing info and make sure this is an OK display mode
	VDTimingInfoRec TimingInfo = *(pModeInfo->displayModeTimingInfo);
	if (TimingInfo.csTimingFlags & 1<<kModeValid)
	{
		// How many modes are being enumerated here?
		unsigned long DepthCount =
			pModeInfo->displayModeDepthBlockInfo->depthBlockCount;

		// Filter through each of the modes provided here
		VDSwitchInfoRec *pSwitchInfo;
		VPBlock *pVPBlockInfo;
		for (short Count = 0; Count < DepthCount; ++Count)
		{
			// This provides the csMode and csData information
			pSwitchInfo =
				pModeInfo->displayModeDepthBlockInfo->
				depthVPBlock[Count].depthSwitchInfo;

			// This tells us the resolution and pixel depth
			pVPBlockInfo =
				pModeInfo->displayModeDepthBlockInfo->
				depthVPBlock[Count].depthVPBlock;

			if (pVPBlockInfo->vpPixelSize ==
pRequest->DesiredDepth &&
				pVPBlockInfo->vpBounds.right ==
pRequest->DesiredWidth &&
				pVPBlockInfo->vpBounds.bottom ==
pRequest->DesiredHeight)
			{
				// Found a mode that matches the request!
				pRequest->csMode = pSwitchInfo->csMode;
				pRequest->csData = pSwitchInfo->csData;
			}
		}
	}
}

int BeginFullScreen(int Width, int Height, int Depth)
{
	// Hide the menu bar
	StealMenuBar();

	// Create a window of the requested size
	Rect WindowRect = { 0, 0, Height, Width };
	Window = NewCWindow(0, &WindowRect, "\pFullScreen",
		TRUE, plainDBox,
		WindowPtr(-1), FALSE, 0);
	if (!Window)
		goto Failure;

	// Set up a palette with a gray wash
	hPalette = NewPalette(256, 0, pmExplicit | pmAnimated, 0);
	if (!hPalette)
		goto Failure;

	RGBColor Color;
	int i;
	for (i=0; i<256; ++i)
	{
		Color.red= i << 8;
		Color.green = i << 8;
		Color.blue = i << 8;

		SetEntryColor(hPalette, i, &Color);
	}

	// Force 0 and 255 to White and Black
	SetEntryUsage(hPalette, 0,
pmExplicit | pmAnimated | pmWhite, 0);
	SetEntryUsage(hPalette, 255,
pmExplicit | pmAnimated | pmBlack, 0);

	SetPalette(Window, hPalette, TRUE);

	// Store information about the current display settings
	DisplayDevice = GetMainDevice();
	if (!DisplayDevice)
		goto Failure;

	csPreviousMode = -1;
	csPreviousData = -1;

	VDSwitchInfoRec DisplayInfo;
	OSErr MacError = DMGetDisplayMode(DisplayDevice, &DisplayInfo);
	if (MacError != noErr)
		goto Failure;

	csPreviousMode = DisplayInfo.csMode;
	csPreviousData = DisplayInfo.csData;

	// Get the display ID for the main display
	DisplayIDType DisplayID;
	DMGetDisplayIDByGDevice(DisplayDevice, &DisplayID, FALSE);

	// Use it to get a list of available modes from the
// Display Manager
	DMListIndexType DisplayModeCount = 0;
	DMListType DisplayModeList;
	MacError = DMNewDisplayModeList(DisplayID, 0, 0,
		&DisplayModeCount, &DisplayModeList);
	if (MacError != noErr)
		goto Failure;

	// Create a callback function pointer to filter available modes
	DMDisplayModeListIteratorUPP uppDisplayModeCallback =
		NewDMDisplayModeListIteratorProc(DisplayModeCallback);
	if (!uppDisplayModeCallback)
	{
		// Aborting - let go of the mode list
		DMDisposeList(DisplayModeList);
		goto Failure;
	}

	// Go through the list, comparing each available mode with
	// this mode request
	DisplayModeRequest ModeRequest;
	ModeRequest.csMode = -1;
	ModeRequest.csData = -1;
	ModeRequest.DesiredWidth = Width;
	ModeRequest.DesiredHeight = Height;
	ModeRequest.DesiredDepth = Depth;

	for (short Count = 0; Count < DisplayModeCount; ++Count)
	{
		DMGetIndexedDisplayModeFromList(DisplayModeList, Count,
			0, uppDisplayModeCallback, (void*)&ModeRequest);
	}

	// Done with the list
	DMDisposeList(DisplayModeList);

	// Done with the callback
	DisposeRoutineDescriptor(uppDisplayModeCallback);

	// If we found a mode fitting the request, switch to it!
	if (ModeRequest.csMode == -1 || ModeRequest.csData == -1)
		goto Failure;

	DisplayInfo.csMode = ModeRequest.csMode;
	DisplayInfo.csData = ModeRequest.csData;

	unsigned long Mode = DisplayInfo.csMode;
	MacError = DMSetDisplayMode(DisplayDevice,
		DisplayInfo.csData, &Mode,
		(unsigned long)&DisplayInfo,
		0);
	if (MacError != noErr)
		goto Failure;

	// Create a matching GWorld using current device and window
	CGrafPtr CurrentPort = (CWindowPtr)Window;
	
	PixMapHandle CurrentPixMap = CurrentPort->portPixMap;
	CTabHandle ColorTable = (*CurrentPixMap)->pmTable;

	NewGWorld(&pOffscreenGWorld, (short)Depth,
		&CurrentPort->portRect, ColorTable,
		DisplayDevice, noNewDevice);
	if (!pOffscreenGWorld)
		goto Failure;

	// Success!
	return 1;

Failure:
	RestoreMenuBar();
	return 0;
}
