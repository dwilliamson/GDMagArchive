Listing 5. Windows Implementation
// This is here to keep it off the stack during the constructor call
struct {
	BITMAPINFOHEADER	Header;
	RGBQUAD				ColorTable[256];
} BufferInfo;

COffscreenBuffer::COffscreenBuffer(void)
{
	HWND ActiveWindow = GetActiveWindow();

	// Make the buffer the same size as the active window
	RECT ClientRect;
	GetClientRect(ActiveWindow, &ClientRect);
	Width = ClientRect.right - ClientRect.left;
	Height = ClientRect.bottom - ClientRect.top;
	Stride = (Width + 3) & (~3);

	// Set up the header for an optimal WinGBitmap
	if (WinGRecommendDIBFormat((LPBITMAPINFO)&BufferInfo))
	{
		// Preserve sign on biHeight for appropriate orientation
		BufferInfo.Header.biWidth = Width;
		BufferInfo.Header.biHeight *= Height;

		// Grab the color entries from the current palette
		HDC hdcScreen = GetDC(ActiveWindow);
		if (hdcScreen)
		{
			PALETTEENTRY Palette[256];
			GetSystemPaletteEntries(hdcScreen, 0, 256, Palette);

			ReleaseDC(ActiveWindow, hdcScreen);

			// Convert the palette entries into RGBQUADs for the color table
			for (int i=0; i<256; ++i)
			{
				BufferInfo.ColorTable[i].rgbRed = Palette[i].peRed;
				BufferInfo.ColorTable[i].rgbGreen = Palette[i].peGreen;
				BufferInfo.ColorTable[i].rgbBlue = Palette[i].peBlue;
				BufferInfo.ColorTable[i].rgbReserved = 0;
			}
		}

		// Create the offscreen DC
		OffscreenDC = WinGCreateDC();
		if (OffscreenDC)
		{
			// Create the offscreen bitmap
			OffscreenBitmap = WinGCreateBitmap(OffscreenDC,
				(LPBITMAPINFO)&BufferInfo, (void * *)&pBits);

			if (OffscreenBitmap)
			{
				// Adjust pBits and Stride for bottom-up DIBs
				if (BufferInfo.Header.biHeight > 0)
				{
					pBits = pBits + (Height - 1) * Stride;
					Stride = -Stride;
				}

				// Prepare the WinGDC/WinGBitmap
				OriginalMonoBitmap = (HBITMAP)SelectObject(OffscreenDC,
					OffscreenBitmap);
			}
			else
			{
				// Clean up in case of error
				DeleteDC(OffscreenDC);
				OffscreenDC = 0;
			}
		}
	}
}

COffscreenBuffer::~COffscreenBuffer(void)
{
	// Delete the offscreen bitmap, selecting back in the original bitmap
	if (OffscreenDC && OffscreenBitmap)
	{
		SelectObject(OffscreenDC, OriginalMonoBitmap);
		DeleteObject(OffscreenBitmap);
	}

	// Delete the offscreen device context
	if (OffscreenDC)
		DeleteDC(OffscreenDC);
}

void COffscreenBuffer::SwapBuffer(void) const
{
	// Use the DC of the active window
	// NOTE: YouOll lose the 1:1 palette mapping if the Window isnOt CS_OWNDC
	HWND ActiveWindow = GetActiveWindow();
	if (ActiveWindow)
	{
		HDC ActiveDC = GetDC(ActiveWindow);
		if (ActiveDC)
		{
			// Perform the blt!
			if (ActiveDC)
			{
				WinGBitBlt(ActiveDC, 0, 0, Width, Height, OffscreenDC, 0, 0);
				ReleaseDC(ActiveWindow, ActiveDC);
			}
		}
	}
}

